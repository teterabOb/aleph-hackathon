{
  "address": "0x31BDcc1Cc978778Be29CE1e3A4c3180448F6687e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidUsdcToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalanceForFees",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "EncodeedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "teleporterSender",
          "type": "address"
        }
      ],
      "name": "TeleporterSender",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "businessAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "businessAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dispatcherAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dispatcherAmount",
          "type": "uint256"
        }
      ],
      "name": "TransferUSDCCIP",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "destinationChainSelector",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "infinitApproveLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "infinitApproveUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiverCCIPArbitrum",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiverTeleporter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sentMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "businessAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "businessAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dispatcherAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dispatcherAmount",
          "type": "uint256"
        }
      ],
      "name": "transferUSDCCIP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "updateArbitrumCCIPReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2fe8b6806469344a22958db18523ecabfbe401c43c66df815736fb83263f304",
  "receipt": {
    "to": null,
    "from": "0xa08A9F51475B42d8F15b28bD91918221Ee71bf8F",
    "contractAddress": "0x31BDcc1Cc978778Be29CE1e3A4c3180448F6687e",
    "transactionIndex": 0,
    "gasUsed": "1921780",
    "logsBloom": "0x
    "blockHash": "0x2b0e38e6505a4b54cbb5c68c7d070faff75779c7d358f72ca3f4e2f35a0e15c9",
    "transactionHash": "0xc2fe8b6806469344a22958db18523ecabfbe401c43c66df815736fb83263f304",
    "logs": [],
    "blockNumber": 35564743,
    "cumulativeGasUsed": "1921780",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bbfe76539dc50eff7ea4ff34e6a3e3bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidUsdcToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalanceForFees\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"EncodeedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teleporterSender\",\"type\":\"address\"}],\"name\":\"TeleporterSender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"businessAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"businessAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dispatcherAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dispatcherAmount\",\"type\":\"uint256\"}],\"name\":\"TransferUSDCCIP\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"destinationChainSelector\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infinitApproveLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infinitApproveUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverCCIPArbitrum\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeleporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sentMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"businessAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"businessAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dispatcherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dispatcherAmount\",\"type\":\"uint256\"}],\"name\":\"transferUSDCCIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updateArbitrumCCIPReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CCIPSender.sol\":\"CCIPSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x28d267ba89cbaca4a86577add59f1a18842ca6e7d80a05f3dbf52127928a5e2c\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x19d64e8f5fa895ab2625917111fd9f316d4f9314239f0712fd6dc2f5bff9d0c9\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x172a09a55d730f20a9bb309086a4ad06b17c612151f58bab2b44efe78d583d4e\",\"license\":\"MIT\"},\"contracts/CCIPSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport { IERC20 } from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract CCIPSender {\\n    /**\\n    AVAX Fuji\\n    Router: 0xF694E193200268f9a4868e4Aa017A0118C9a8177\\n    ChainSelector: 14767482510784806043\\n    LINK Address: 0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\\n    USDC: \\n    */\\n    /**\\n    Arbitrum Sepolia\\n    Router: 0x2a9C5afB0d0e4BAb2BCdaE109EC4b0c4Be15a165\\n    ChainSelector: 3478487238524512106\\n    LINK Address: \\n     */\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tstruct CCIPConfig {\\n\\t\\taddress router;\\n\\t\\taddress chainId;\\n\\t}\\n\\n\\tstruct Messages {\\n\\t\\tuint256 id;\\n\\t\\taddress receiver;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\taddress public receiverCCIPArbitrum;\\n    // Info hardcoded for AVAX Fuji\\n\\tIERC20 private immutable _linkToken = IERC20(0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846);\\n    IERC20 private immutable _usdcToken = IERC20(0x5425890298aed601595a70AB815c96711a31Bc65);\\n\\tIRouterClient public router = IRouterClient(0xF694E193200268f9a4868e4Aa017A0118C9a8177);\\n\\tuint64 public destinationChainSelector = 3478487238524512106;  // Arbitrum Sepolia\\n    address public owner;\\n    address public receiverTeleporter;\\n\\n\\tmapping(uint256 => bool) public sentMessages;\\n\\n\\tevent TransferUSDCCIP(uint256 indexed id, address businessAddress, uint256 indexed businessAmount, address dispatcherAddress, uint256 indexed dispatcherAmount);\\n    event EncodeedData(bytes data);\\n\\tevent TeleporterSender(address teleporterSender);\\n\\n    error InvalidUsdcToken();\\n\\terror NotEnoughBalanceForFees(uint256 balance, uint256 fees);\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function transferUSDCCIP(\\n\\t\\tuint256 id,\\n\\t\\taddress businessAddress,\\n\\t\\tuint256 businessAmount,\\n\\t\\taddress dispatcherAddress,\\n\\t\\tuint256 dispatcherAmount\\n\\t) external {\\n\\t\\trequire(receiverCCIPArbitrum != address(0), \\\"CCIPSender: receiver not set\\\");\\n\\t\\trequire(!sentMessages[id], \\\"CCIPSender: message already sent\\\");\\t\\t\\n\\t\\tsentMessages[id] = true;\\n\\t\\tbytes memory message = abi.encode(\\\"(uint256,address,uint256,address,uint256)\\\", \\n\\t\\tid, businessAddress, businessAmount, dispatcherAddress, dispatcherAmount);\\n\\t\\tuint256 finalAmount = businessAmount + dispatcherAmount;\\n\\t\\t_sendCrossChainMessage(finalAmount, message);\\n\\t\\temit TeleporterSender(msg.sender);\\n\\t\\temit TransferUSDCCIP(id, businessAddress, businessAmount, dispatcherAddress, dispatcherAmount);\\n\\t}\\n\\n\\tfunction _sendCrossChainMessage(\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data\\n\\t) internal returns (bytes32 messageId) {\\n\\t\\tClient.EVM2AnyMessage memory message = _buildCCIPMessage(\\n\\t\\t\\treceiverCCIPArbitrum, // receiver ccip contract\\n\\t\\t\\taddress(_usdcToken), // token USDC\\n\\t\\t\\tamount, // amount\\n\\t\\t\\taddress(_linkToken), // LINK Token\\n\\t\\t\\tdata\\n\\t\\t);\\n\\n\\t\\tuint256 fees = router.getFee(destinationChainSelector, message);\\n\\t\\tif (fees > _linkToken.balanceOf(address(this))) {\\n\\t\\t\\trevert NotEnoughBalanceForFees(_linkToken.balanceOf(address(this)), fees);\\n\\t\\t}\\n\\n\\t\\tmessageId = router.ccipSend(destinationChainSelector, message);\\n        return messageId;\\n\\t}\\n\\n    function infinitApproveLink() onlyOwner public {\\n        _linkToken.approve(address(router), type(uint256).max);\\n    }\\n\\n    function infinitApproveUSDC() onlyOwner public {\\n        _usdcToken.approve(address(router), type(uint256).max);\\n    }\\n\\n    function withdrawLink() public onlyOwner {\\n        _linkToken.safeTransfer(owner, _linkToken.balanceOf(address(this)));\\n    }\\n\\n    function withdrawUSDC() public onlyOwner {\\n        _usdcToken.safeTransfer(owner, _usdcToken.balanceOf(address(this)));\\n    }\\n\\n\\tfunction updateArbitrumCCIPReceiver(address newReceiver) public onlyOwner {\\n\\t\\trequire(newReceiver != address(0), \\\"CCIPSender: invalid receiver address\\\");\\n\\t\\treceiverCCIPArbitrum = newReceiver;\\n\\t}\\n\\n\\tfunction _buildCCIPMessage(\\n\\t\\taddress receiver,\\n\\t\\taddress token,\\n\\t\\tuint256 amount,\\n\\t\\taddress feeTokenAddress,\\n\\t\\tbytes memory data\\n\\t) internal pure returns (Client.EVM2AnyMessage memory) {\\n\\t\\tClient.EVMTokenAmount[]\\n\\t\\t\\tmemory tokenAmounts = new Client.EVMTokenAmount[](1);\\n\\n\\t\\ttokenAmounts[0] = Client.EVMTokenAmount({\\n\\t\\t\\ttoken: token,\\n\\t\\t\\tamount: amount\\n\\t\\t});\\n\\n\\t\\treturn\\n\\t\\t\\tClient.EVM2AnyMessage({\\n\\t\\t\\t\\treceiver: abi.encode(receiver),\\n\\t\\t\\t\\tdata: data,\\n\\t\\t\\t\\ttokenAmounts: tokenAmounts,\\n\\t\\t\\t\\textraArgs: Client._argsToBytes(\\n\\t\\t\\t\\t\\tClient.EVMExtraArgsV1({ gasLimit: 200_000 })\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tfeeToken: feeTokenAddress\\n\\t\\t\\t});\\n\\t}\\n\\n    modifier onlyReceiverTeleporter(){\\n        require(msg.sender == receiverTeleporter, \\\"CCIPSender: unauthorized TeleporterMessenger\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner(){\\n        require(msg.sender == owner, \\\"CCIPSender: unauthorized Owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc0e1f8f0341f6a627e1de000e5229be81adfc9d90f15aa2c6714711783145e8f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052730b9d5d9136855f6fec3c0993fee6e9ce8a29784673ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250735425890298aed601595a70ab815c96711a31bc6573ffffffffffffffffffffffffffffffffffffffff1660a09073ffffffffffffffffffffffffffffffffffffffff1681525073f694e193200268f9a4868e4aa017a0118c9a8177600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555067304611b6affba76a600160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555034801561012457600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060805160a05161210e6101c36000396000818161078e01528181610aba01528181610b540152610c0f01526000818161061c015281816106b60152818161092101528181610c3101528181610d120152610db3015261210e6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063afa2a18011610071578063afa2a18014610155578063bc294d7d1461015f578063c56a45911461018f578063d8fc063d14610199578063dbb84759146101a3578063f887ea40146101c1576100b4565b806325f00ecf146100b957806331db1ffc146100d75780636127fc4c146100f5578063619daea1146101115780638da5cb5b1461012d5780638dc654a21461014b575b600080fd5b6100c16101df565b6040516100ce91906114c4565b60405180910390f35b6100df610203565b6040516100ec9190611502565b60405180910390f35b61010f600480360381019061010a919061154e565b61021d565b005b61012b600480360381019061012691906115b1565b61035f565b005b61013561053e565b60405161014291906114c4565b60405180910390f35b610153610564565b005b61015d6106fc565b005b6101796004803603810190610174919061162c565b61086f565b6040516101869190611674565b60405180910390f35b61019761088f565b005b6101a1610a02565b005b6101ab610b9a565b6040516101b891906114c4565b60405180910390f35b6101c9610bc0565b6040516101d691906116ee565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900467ffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a490611766565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361031c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610313906117f8565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036103ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e590611864565b60405180910390fd5b6004600086815260200190815260200160002060009054906101000a900460ff161561044f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610446906118d0565b60405180910390fd5b60016004600087815260200190815260200160002060006101000a81548160ff02191690831515021790555060008585858585604051602001610496959493929190611971565b6040516020818303038152906040529050600082856104b59190611a06565b90506104c18183610be6565b507fbf0c6b20b671258adc6eec62b68ba45ff4f1d34c2ac9d19b9164f6ad93ae184b336040516104f191906114c4565b60405180910390a18285887f9b42f82cf04ee2573163dbc276e268b7de75f39844d3736a08b503595102b815898860405161052d929190611a3a565b60405180910390a450505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb90611766565b60405180910390fd5b6106fa600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161067391906114c4565b602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190611a78565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f499092919063ffffffff16565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078390611766565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610829929190611aa5565b6020604051808303816000875af1158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190611afa565b50565b60046020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091690611766565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016109bc929190611aa5565b6020604051808303816000875af11580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190611afa565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8990611766565b60405180910390fd5b610b98600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b1191906114c4565b602060405180830381865afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190611a78565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f499092919063ffffffff16565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610c5660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f0000000000000000000000000000000000000000000000000000000000000000867f000000000000000000000000000000000000000000000000000000000000000087610fcf565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded600160149054906101000a900467ffffffffffffffff16846040518363ffffffff1660e01b8152600401610ccd929190611d3e565b602060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190611a78565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d6991906114c4565b602060405180830381865afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa9190611a78565b811115610e89577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e0a91906114c4565b602060405180830381865afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190611a78565b816040517f28fdcaa1000000000000000000000000000000000000000000000000000000008152600401610e80929190611d6e565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f9600160149054906101000a900467ffffffffffffffff16846040518363ffffffff1660e01b8152600401610efc929190611d3e565b6020604051808303816000875af1158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190611dcd565b9250505092915050565b610fca8363a9059cbb60e01b8484604051602401610f68929190611aa5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110fb565b505050565b610fd761140e565b6000600167ffffffffffffffff811115610ff457610ff3611dfa565b5b60405190808252806020026020018201604052801561102d57816020015b61101a611453565b8152602001906001900390816110125790505b50905060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001868152508160008151811061106f5761106e611e29565b5b60200260200101819052506040518060a001604052808860405160200161109691906114c4565b60405160208183030381529060405281526020018481526020018281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016110ec604051806020016040528062030d408152506111c2565b81525091505095945050505050565b600061115d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112419092919063ffffffff16565b90506000815111156111bd578080602001905181019061117d9190611afa565b6111bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b390611eca565b60405180910390fd5b5b505050565b60606397a657c960e01b826040516024016111dd9190611f06565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60606112508484600085611259565b90509392505050565b60608247101561129e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129590611f93565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112c79190611fef565b60006040518083038185875af1925050503d8060008114611304576040519150601f19603f3d011682016040523d82523d6000602084013e611309565b606091505b509150915061131a87838387611326565b92505050949350505050565b60608315611388576000835103611380576113408561139b565b61137f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137690612052565b60405180910390fd5b5b829050611393565b61139283836113be565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156113d15781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140591906120b6565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114ae82611483565b9050919050565b6114be816114a3565b82525050565b60006020820190506114d960008301846114b5565b92915050565b600067ffffffffffffffff82169050919050565b6114fc816114df565b82525050565b600060208201905061151760008301846114f3565b92915050565b600080fd5b61152b816114a3565b811461153657600080fd5b50565b60008135905061154881611522565b92915050565b6000602082840312156115645761156361151d565b5b600061157284828501611539565b91505092915050565b6000819050919050565b61158e8161157b565b811461159957600080fd5b50565b6000813590506115ab81611585565b92915050565b600080600080600060a086880312156115cd576115cc61151d565b5b60006115db8882890161159c565b95505060206115ec88828901611539565b94505060406115fd8882890161159c565b935050606061160e88828901611539565b925050608061161f8882890161159c565b9150509295509295909350565b6000602082840312156116425761164161151d565b5b60006116508482850161159c565b91505092915050565b60008115159050919050565b61166e81611659565b82525050565b60006020820190506116896000830184611665565b92915050565b6000819050919050565b60006116b46116af6116aa84611483565b61168f565b611483565b9050919050565b60006116c682611699565b9050919050565b60006116d8826116bb565b9050919050565b6116e8816116cd565b82525050565b600060208201905061170360008301846116df565b92915050565b600082825260208201905092915050565b7f4343495053656e6465723a20756e617574686f72697a6564204f776e65720000600082015250565b6000611750601e83611709565b915061175b8261171a565b602082019050919050565b6000602082019050818103600083015261177f81611743565b9050919050565b7f4343495053656e6465723a20696e76616c69642072656365697665722061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006117e2602483611709565b91506117ed82611786565b604082019050919050565b60006020820190508181036000830152611811816117d5565b9050919050565b7f4343495053656e6465723a207265636569766572206e6f742073657400000000600082015250565b600061184e601c83611709565b915061185982611818565b602082019050919050565b6000602082019050818103600083015261187d81611841565b9050919050565b7f4343495053656e6465723a206d65737361676520616c72656164792073656e74600082015250565b60006118ba602083611709565b91506118c582611884565b602082019050919050565b600060208201905081810360008301526118e9816118ad565b9050919050565b7f2875696e743235362c616464726573732c75696e743235362c6164647265737360008201527f2c75696e74323536290000000000000000000000000000000000000000000000602082015250565b600061194c602983611709565b9150611957826118f0565b604082019050919050565b61196b8161157b565b82525050565b600060c082019050818103600083015261198a8161193f565b90506119996020830188611962565b6119a660408301876114b5565b6119b36060830186611962565b6119c060808301856114b5565b6119cd60a0830184611962565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a118261157b565b9150611a1c8361157b565b9250828201905080821115611a3457611a336119d7565b5b92915050565b6000604082019050611a4f60008301856114b5565b611a5c60208301846114b5565b9392505050565b600081519050611a7281611585565b92915050565b600060208284031215611a8e57611a8d61151d565b5b6000611a9c84828501611a63565b91505092915050565b6000604082019050611aba60008301856114b5565b611ac76020830184611962565b9392505050565b611ad781611659565b8114611ae257600080fd5b50565b600081519050611af481611ace565b92915050565b600060208284031215611b1057611b0f61151d565b5b6000611b1e84828501611ae5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b61578082015181840152602081019050611b46565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b8982611b27565b611b938185611b32565b9350611ba3818560208601611b43565b611bac81611b6d565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611bec816114a3565b82525050565b611bfb8161157b565b82525050565b604082016000820151611c176000850182611be3565b506020820151611c2a6020850182611bf2565b50505050565b6000611c3c8383611c01565b60408301905092915050565b6000602082019050919050565b6000611c6082611bb7565b611c6a8185611bc2565b9350611c7583611bd3565b8060005b83811015611ca6578151611c8d8882611c30565b9750611c9883611c48565b925050600181019050611c79565b5085935050505092915050565b600060a0830160008301518482036000860152611cd08282611b7e565b91505060208301518482036020860152611cea8282611b7e565b91505060408301518482036040860152611d048282611c55565b9150506060830151611d196060860182611be3565b5060808301518482036080860152611d318282611b7e565b9150508091505092915050565b6000604082019050611d5360008301856114f3565b8181036020830152611d658184611cb3565b90509392505050565b6000604082019050611d836000830185611962565b611d906020830184611962565b9392505050565b6000819050919050565b611daa81611d97565b8114611db557600080fd5b50565b600081519050611dc781611da1565b92915050565b600060208284031215611de357611de261151d565b5b6000611df184828501611db8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611eb4602a83611709565b9150611ebf82611e58565b604082019050919050565b60006020820190508181036000830152611ee381611ea7565b9050919050565b602082016000820151611f006000850182611bf2565b50505050565b6000602082019050611f1b6000830184611eea565b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611f7d602683611709565b9150611f8882611f21565b604082019050919050565b60006020820190508181036000830152611fac81611f70565b9050919050565b600081905092915050565b6000611fc982611b27565b611fd38185611fb3565b9350611fe3818560208601611b43565b80840191505092915050565b6000611ffb8284611fbe565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061203c601d83611709565b915061204782612006565b602082019050919050565b6000602082019050818103600083015261206b8161202f565b9050919050565b600081519050919050565b600061208882612072565b6120928185611709565b93506120a2818560208601611b43565b6120ab81611b6d565b840191505092915050565b600060208201905081810360008301526120d0818461207d565b90509291505056fea2646970667358221220446a54725638d39581e365665540d1fa4f2b18e74c876d771da97b9089b03a0d64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063afa2a18011610071578063afa2a18014610155578063bc294d7d1461015f578063c56a45911461018f578063d8fc063d14610199578063dbb84759146101a3578063f887ea40146101c1576100b4565b806325f00ecf146100b957806331db1ffc146100d75780636127fc4c146100f5578063619daea1146101115780638da5cb5b1461012d5780638dc654a21461014b575b600080fd5b6100c16101df565b6040516100ce91906114c4565b60405180910390f35b6100df610203565b6040516100ec9190611502565b60405180910390f35b61010f600480360381019061010a919061154e565b61021d565b005b61012b600480360381019061012691906115b1565b61035f565b005b61013561053e565b60405161014291906114c4565b60405180910390f35b610153610564565b005b61015d6106fc565b005b6101796004803603810190610174919061162c565b61086f565b6040516101869190611674565b60405180910390f35b61019761088f565b005b6101a1610a02565b005b6101ab610b9a565b6040516101b891906114c4565b60405180910390f35b6101c9610bc0565b6040516101d691906116ee565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900467ffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a490611766565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361031c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610313906117f8565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036103ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e590611864565b60405180910390fd5b6004600086815260200190815260200160002060009054906101000a900460ff161561044f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610446906118d0565b60405180910390fd5b60016004600087815260200190815260200160002060006101000a81548160ff02191690831515021790555060008585858585604051602001610496959493929190611971565b6040516020818303038152906040529050600082856104b59190611a06565b90506104c18183610be6565b507fbf0c6b20b671258adc6eec62b68ba45ff4f1d34c2ac9d19b9164f6ad93ae184b336040516104f191906114c4565b60405180910390a18285887f9b42f82cf04ee2573163dbc276e268b7de75f39844d3736a08b503595102b815898860405161052d929190611a3a565b60405180910390a450505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb90611766565b60405180910390fd5b6106fa600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161067391906114c4565b602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190611a78565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f499092919063ffffffff16565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078390611766565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610829929190611aa5565b6020604051808303816000875af1158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190611afa565b50565b60046020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091690611766565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016109bc929190611aa5565b6020604051808303816000875af11580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190611afa565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8990611766565b60405180910390fd5b610b98600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b1191906114c4565b602060405180830381865afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190611a78565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f499092919063ffffffff16565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610c5660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f0000000000000000000000000000000000000000000000000000000000000000867f000000000000000000000000000000000000000000000000000000000000000087610fcf565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded600160149054906101000a900467ffffffffffffffff16846040518363ffffffff1660e01b8152600401610ccd929190611d3e565b602060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190611a78565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d6991906114c4565b602060405180830381865afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa9190611a78565b811115610e89577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e0a91906114c4565b602060405180830381865afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190611a78565b816040517f28fdcaa1000000000000000000000000000000000000000000000000000000008152600401610e80929190611d6e565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f9600160149054906101000a900467ffffffffffffffff16846040518363ffffffff1660e01b8152600401610efc929190611d3e565b6020604051808303816000875af1158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190611dcd565b9250505092915050565b610fca8363a9059cbb60e01b8484604051602401610f68929190611aa5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110fb565b505050565b610fd761140e565b6000600167ffffffffffffffff811115610ff457610ff3611dfa565b5b60405190808252806020026020018201604052801561102d57816020015b61101a611453565b8152602001906001900390816110125790505b50905060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001868152508160008151811061106f5761106e611e29565b5b60200260200101819052506040518060a001604052808860405160200161109691906114c4565b60405160208183030381529060405281526020018481526020018281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016110ec604051806020016040528062030d408152506111c2565b81525091505095945050505050565b600061115d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112419092919063ffffffff16565b90506000815111156111bd578080602001905181019061117d9190611afa565b6111bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b390611eca565b60405180910390fd5b5b505050565b60606397a657c960e01b826040516024016111dd9190611f06565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60606112508484600085611259565b90509392505050565b60608247101561129e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129590611f93565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112c79190611fef565b60006040518083038185875af1925050503d8060008114611304576040519150601f19603f3d011682016040523d82523d6000602084013e611309565b606091505b509150915061131a87838387611326565b92505050949350505050565b60608315611388576000835103611380576113408561139b565b61137f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137690612052565b60405180910390fd5b5b829050611393565b61139283836113be565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156113d15781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140591906120b6565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114ae82611483565b9050919050565b6114be816114a3565b82525050565b60006020820190506114d960008301846114b5565b92915050565b600067ffffffffffffffff82169050919050565b6114fc816114df565b82525050565b600060208201905061151760008301846114f3565b92915050565b600080fd5b61152b816114a3565b811461153657600080fd5b50565b60008135905061154881611522565b92915050565b6000602082840312156115645761156361151d565b5b600061157284828501611539565b91505092915050565b6000819050919050565b61158e8161157b565b811461159957600080fd5b50565b6000813590506115ab81611585565b92915050565b600080600080600060a086880312156115cd576115cc61151d565b5b60006115db8882890161159c565b95505060206115ec88828901611539565b94505060406115fd8882890161159c565b935050606061160e88828901611539565b925050608061161f8882890161159c565b9150509295509295909350565b6000602082840312156116425761164161151d565b5b60006116508482850161159c565b91505092915050565b60008115159050919050565b61166e81611659565b82525050565b60006020820190506116896000830184611665565b92915050565b6000819050919050565b60006116b46116af6116aa84611483565b61168f565b611483565b9050919050565b60006116c682611699565b9050919050565b60006116d8826116bb565b9050919050565b6116e8816116cd565b82525050565b600060208201905061170360008301846116df565b92915050565b600082825260208201905092915050565b7f4343495053656e6465723a20756e617574686f72697a6564204f776e65720000600082015250565b6000611750601e83611709565b915061175b8261171a565b602082019050919050565b6000602082019050818103600083015261177f81611743565b9050919050565b7f4343495053656e6465723a20696e76616c69642072656365697665722061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006117e2602483611709565b91506117ed82611786565b604082019050919050565b60006020820190508181036000830152611811816117d5565b9050919050565b7f4343495053656e6465723a207265636569766572206e6f742073657400000000600082015250565b600061184e601c83611709565b915061185982611818565b602082019050919050565b6000602082019050818103600083015261187d81611841565b9050919050565b7f4343495053656e6465723a206d65737361676520616c72656164792073656e74600082015250565b60006118ba602083611709565b91506118c582611884565b602082019050919050565b600060208201905081810360008301526118e9816118ad565b9050919050565b7f2875696e743235362c616464726573732c75696e743235362c6164647265737360008201527f2c75696e74323536290000000000000000000000000000000000000000000000602082015250565b600061194c602983611709565b9150611957826118f0565b604082019050919050565b61196b8161157b565b82525050565b600060c082019050818103600083015261198a8161193f565b90506119996020830188611962565b6119a660408301876114b5565b6119b36060830186611962565b6119c060808301856114b5565b6119cd60a0830184611962565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a118261157b565b9150611a1c8361157b565b9250828201905080821115611a3457611a336119d7565b5b92915050565b6000604082019050611a4f60008301856114b5565b611a5c60208301846114b5565b9392505050565b600081519050611a7281611585565b92915050565b600060208284031215611a8e57611a8d61151d565b5b6000611a9c84828501611a63565b91505092915050565b6000604082019050611aba60008301856114b5565b611ac76020830184611962565b9392505050565b611ad781611659565b8114611ae257600080fd5b50565b600081519050611af481611ace565b92915050565b600060208284031215611b1057611b0f61151d565b5b6000611b1e84828501611ae5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b61578082015181840152602081019050611b46565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b8982611b27565b611b938185611b32565b9350611ba3818560208601611b43565b611bac81611b6d565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611bec816114a3565b82525050565b611bfb8161157b565b82525050565b604082016000820151611c176000850182611be3565b506020820151611c2a6020850182611bf2565b50505050565b6000611c3c8383611c01565b60408301905092915050565b6000602082019050919050565b6000611c6082611bb7565b611c6a8185611bc2565b9350611c7583611bd3565b8060005b83811015611ca6578151611c8d8882611c30565b9750611c9883611c48565b925050600181019050611c79565b5085935050505092915050565b600060a0830160008301518482036000860152611cd08282611b7e565b91505060208301518482036020860152611cea8282611b7e565b91505060408301518482036040860152611d048282611c55565b9150506060830151611d196060860182611be3565b5060808301518482036080860152611d318282611b7e565b9150508091505092915050565b6000604082019050611d5360008301856114f3565b8181036020830152611d658184611cb3565b90509392505050565b6000604082019050611d836000830185611962565b611d906020830184611962565b9392505050565b6000819050919050565b611daa81611d97565b8114611db557600080fd5b50565b600081519050611dc781611da1565b92915050565b600060208284031215611de357611de261151d565b5b6000611df184828501611db8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611eb4602a83611709565b9150611ebf82611e58565b604082019050919050565b60006020820190508181036000830152611ee381611ea7565b9050919050565b602082016000820151611f006000850182611bf2565b50505050565b6000602082019050611f1b6000830184611eea565b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611f7d602683611709565b9150611f8882611f21565b604082019050919050565b60006020820190508181036000830152611fac81611f70565b9050919050565b600081905092915050565b6000611fc982611b27565b611fd38185611fb3565b9350611fe3818560208601611b43565b80840191505092915050565b6000611ffb8284611fbe565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061203c601d83611709565b915061204782612006565b602082019050919050565b6000602082019050818103600083015261206b8161202f565b9050919050565b600081519050919050565b600061208882612072565b6120928185611709565b93506120a2818560208601611b43565b6120ab81611b6d565b840191505092915050565b600060208201905081810360008301526120d0818461207d565b90509291505056fea2646970667358221220446a54725638d39581e365665540d1fa4f2b18e74c876d771da97b9089b03a0d64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1212,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "receiverCCIPArbitrum",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1230,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "router",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRouterClient)184"
      },
      {
        "astId": 1233,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "destinationChainSelector",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 1235,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1237,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "receiverTeleporter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1241,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "sentMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRouterClient)184": {
        "encoding": "inplace",
        "label": "contract IRouterClient",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}