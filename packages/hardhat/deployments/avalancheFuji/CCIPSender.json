{
  "address": "0x85ff74BDB31bD4615d6D5e50122e41Ab0940cBf9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidUsdcToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalanceForFees",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "EncodeedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferUSDCCIP",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "decodeMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "infinitApproveLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "infinitApproveUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "messages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiverTeleporter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendCrossChainMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sentMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferUSDCCIP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe23606a3604936466434b5f493b209e532b1bd0c5315e637be279b3429c8e932",
  "receipt": {
    "to": null,
    "from": "0xa08A9F51475B42d8F15b28bD91918221Ee71bf8F",
    "contractAddress": "0x85ff74BDB31bD4615d6D5e50122e41Ab0940cBf9",
    "transactionIndex": 0,
    "gasUsed": "1825057",
    "logsBloom": "0x
    "blockHash": "0xb554bf870a405de48059336c86c2ee7e7fa55663c2c29173a857e5ceb03862c7",
    "transactionHash": "0xe23606a3604936466434b5f493b209e532b1bd0c5315e637be279b3429c8e932",
    "logs": [],
    "blockNumber": 35557188,
    "cumulativeGasUsed": "1825057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9138de8a4973025d3648b46b619b5c0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidUsdcToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalanceForFees\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"EncodeedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferUSDCCIP\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infinitApproveLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infinitApproveUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeleporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendCrossChainMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sentMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUSDCCIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CCIPSender.sol\":\"CCIPSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x28d267ba89cbaca4a86577add59f1a18842ca6e7d80a05f3dbf52127928a5e2c\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x19d64e8f5fa895ab2625917111fd9f316d4f9314239f0712fd6dc2f5bff9d0c9\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x172a09a55d730f20a9bb309086a4ad06b17c612151f58bab2b44efe78d583d4e\",\"license\":\"MIT\"},\"contracts/CCIPSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { IRouterClient } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport { Client } from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport { IERC20 } from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract CCIPSender {\\n    /**\\n    AVAX Fuji\\n    Router: 0xF694E193200268f9a4868e4Aa017A0118C9a8177\\n    ChainSelector: 14767482510784806043\\n    LINK Address: 0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846\\n    USDC: \\n    */\\n    /**\\n    Arbitrum Sepolia\\n    Router: 0x2a9C5afB0d0e4BAb2BCdaE109EC4b0c4Be15a165\\n    ChainSelector: 3478487238524512106\\n    LINK Address: \\n     */\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tstruct CCIPConfig {\\n\\t\\taddress router;\\n\\t\\taddress chainId;\\n\\t}\\n\\n\\tstruct Messages {\\n\\t\\tuint256 id;\\n\\t\\taddress receiver;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n    // Info hardcoded for AVAX Fuji\\n\\tIERC20 private immutable _linkToken = IERC20(0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846);\\n    IERC20 private immutable _usdcToken = IERC20(0x5425890298aed601595a70AB815c96711a31Bc65);\\n\\tIRouterClient public router = IRouterClient(0xF694E193200268f9a4868e4Aa017A0118C9a8177);\\n    address public owner;\\n    address public receiverTeleporter;\\n\\n    bool public updated = false;\\n\\tmapping(uint256 => bool) public sentMessages;\\n\\tmapping(uint256 => Messages) public messages;\\n\\n\\tevent TransferUSDCCIP(uint256 id, address receiver, uint256 amount);\\n    event EncodeedData(bytes data);\\n\\n    error InvalidUsdcToken();\\n\\terror NotEnoughBalanceForFees(uint256 balance, uint256 fees);\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function transferUSDCCIP(\\n\\t\\tuint256 id,\\n\\t\\taddress receiver,\\n\\t\\tuint256 amount\\n\\t) external {\\n        //require(msg.sender == receiverCChain, \\\"CCIPSender: unauthorized ReceiverCCHain\\\");\\n\\t\\t//require(!sentMessages[id], \\\"CCIPSender: message already sent\\\");\\n\\t\\t// Transfer USD CCIP to receiver\\n\\t\\t// ChainSelector for Arbitrum Sepolia Hardcoded\\n\\t\\tuint64 destinationChainSelector = 3478487238524512106;  \\n\\t\\tmessages[id] = Messages(id, receiver, amount);\\n\\t\\tsentMessages[id] = true;\\n\\t\\tsendCrossChainMessage(destinationChainSelector, receiver, address(_usdcToken), amount);\\n\\t\\temit TransferUSDCCIP(id, receiver, amount);\\n\\t}\\n\\n\\tfunction sendCrossChainMessage(\\n\\t\\tuint64 destinationChainSelector,\\n\\t\\taddress receiver,\\n\\t\\taddress token,\\n\\t\\tuint256 amount\\n\\t) public returns (bytes32 messageId) {\\n\\t\\tClient.EVM2AnyMessage memory message = _buildCCIPMessage(\\n\\t\\t\\treceiver, // receiver\\n\\t\\t\\ttoken, // token USDC\\n\\t\\t\\tamount, // monto\\n\\t\\t\\taddress(_linkToken) // LINK Token\\n\\t\\t);\\n\\n\\n\\t\\tuint256 fees = router.getFee(destinationChainSelector, message);\\n\\t\\tif (fees > _linkToken.balanceOf(address(this))) {\\n\\t\\t\\trevert NotEnoughBalanceForFees(_linkToken.balanceOf(address(this)), fees);\\n\\t\\t}\\n\\n        //These lines can be removed if the contract is approved \\n        //to spend the maximum amount of LINK and USDC\\n        // by calling `infiniteApproveLink` and `infiniteApproveUSDC`\\n\\t\\t//_linkToken.approve(address(router), fees);\\n        //_usdcToken.approve(address(router), amount);\\n\\n\\t\\tmessageId = router.ccipSend(destinationChainSelector, message);\\n        return messageId;\\n\\t}\\n\\n    function infinitApproveLink() onlyOwner public {\\n        _linkToken.approve(address(router), type(uint256).max);\\n    }\\n\\n    function infinitApproveUSDC() onlyOwner public {\\n        _usdcToken.approve(address(router), type(uint256).max);\\n    }\\n\\n    function withdrawLink() public onlyOwner {\\n        _linkToken.safeTransfer(owner, _linkToken.balanceOf(address(this)));\\n    }\\n\\n    function withdrawUSDC() public onlyOwner {\\n        _usdcToken.safeTransfer(owner, _usdcToken.balanceOf(address(this)));\\n    }\\n\\n    function decodeMessage(bytes calldata data) public pure returns (string memory) {\\n        return abi.decode(data, (string));\\n    }\\n\\n\\tfunction _buildCCIPMessage(\\n\\t\\taddress receiver,\\n\\t\\taddress token,\\n\\t\\tuint256 amount,\\n\\t\\taddress feeTokenAddress\\n\\t) internal pure returns (Client.EVM2AnyMessage memory) {\\n\\t\\tClient.EVMTokenAmount[]\\n\\t\\t\\tmemory tokenAmounts = new Client.EVMTokenAmount[](1);\\n\\n\\t\\ttokenAmounts[0] = Client.EVMTokenAmount({\\n\\t\\t\\ttoken: token,\\n\\t\\t\\tamount: amount\\n\\t\\t});\\n\\n\\t\\treturn\\n\\t\\t\\tClient.EVM2AnyMessage({\\n\\t\\t\\t\\treceiver: abi.encode(receiver),\\n\\t\\t\\t\\tdata: \\\"\\\",\\n\\t\\t\\t\\ttokenAmounts: tokenAmounts,\\n\\t\\t\\t\\textraArgs: Client._argsToBytes(\\n\\t\\t\\t\\t\\tClient.EVMExtraArgsV1({ gasLimit: 200_000 })\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tfeeToken: feeTokenAddress\\n\\t\\t\\t});\\n\\t}\\n\\n    modifier onlyReceiverTeleporter(){\\n        require(msg.sender == receiverTeleporter, \\\"CCIPSender: unauthorized TeleporterMessenger\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner(){\\n        require(msg.sender == owner, \\\"CCIPSender: unauthorized Owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4d660614845ded251cf3f0d01c2e5bd73f3abf38f2f7f8ae1aaab1fce13d5bf8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052730b9d5d9136855f6fec3c0993fee6e9ce8a29784673ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250735425890298aed601595a70ab815c96711a31bc6573ffffffffffffffffffffffffffffffffffffffff1660a09073ffffffffffffffffffffffffffffffffffffffff1681525073f694e193200268f9a4868e4aa017a0118c9a81776000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff02191690831515021790555034801561010d57600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060805160a051611f3c6101ac6000396000818161080d01528181610b3501528181610bcf0152610d1d0152600081816103a601528181610440015281816104910152818161055a015281816105fb015261099e0152611f3c6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063afa2a1801161008c578063d8fc063d11610066578063d8fc063d146101f0578063dbb84759146101fa578063f099fd6f14610218578063f887ea4014610234576100cf565b8063afa2a180146101ac578063bc294d7d146101b6578063c56a4591146101e6576100cf565b80630d80fefd146100d4578063634d45b2146101065780637b2aab03146101365780638da5cb5b146101545780638dc654a2146101725780639bb4e5371461017c575b600080fd5b6100ee60048036038101906100e9919061133a565b610252565b6040516100fd939291906113b7565b60405180910390f35b610120600480360381019061011b9190611453565b61029c565b60405161012d9190611530565b60405180910390f35b61013e6102b5565b60405161014b919061156d565b60405180910390f35b61015c6102c8565b6040516101699190611588565b60405180910390f35b61017a6102ee565b005b6101966004803603810190610191919061160f565b610486565b6040516101a3919061168f565b60405180910390f35b6101b461077b565b005b6101d060048036038101906101cb919061133a565b6108ec565b6040516101dd919061156d565b60405180910390f35b6101ee61090c565b005b6101f8610a7d565b005b610202610c15565b60405161020f9190611588565b60405180910390f35b610232600480360381019061022d91906116aa565b610c3b565b005b61023c610d84565b604051610249919061175c565b60405180910390f35b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b606082828101906102ad91906118a7565b905092915050565b600260149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103759061193c565b60405180910390fd5b610484600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103fd9190611588565b602060405180830381865afa15801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190611971565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610da89092919063ffffffff16565b565b6000806104b58585857f0000000000000000000000000000000000000000000000000000000000000000610e2e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded88846040518363ffffffff1660e01b8152600401610515929190611b89565b602060405180830381865afa158015610532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105569190611971565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b19190611588565b602060405180830381865afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f29190611971565b8111156106d1577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106529190611588565b602060405180830381865afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190611971565b816040517f28fdcaa10000000000000000000000000000000000000000000000000000000081526004016106c8929190611bb9565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f988846040518363ffffffff1660e01b815260040161072c929190611b89565b6020604051808303816000875af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190611c0e565b92505050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461080b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108029061193c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108a6929190611c3b565b6020604051808303816000875af11580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e99190611c90565b50565b60036020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461099c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109939061193c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a37929190611c3b565b6020604051808303816000875af1158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190611c90565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b049061193c565b60405180910390fd5b610c13600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b8c9190611588565b602060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190611971565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610da89092919063ffffffff16565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600067304611b6affba76a905060405180606001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250600460008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505060016003600086815260200190815260200160002060006101000a81548160ff021916908315150217905550610d4281847f000000000000000000000000000000000000000000000000000000000000000085610486565b507f117f98de0fb7abfad7b68e4ed4f5898976df4b7da38d60ddc6a6e689369f16bf848484604051610d76939291906113b7565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e298363a9059cbb60e01b8484604051602401610dc7929190611c3b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f68565b505050565b610e3661127b565b6000600167ffffffffffffffff811115610e5357610e5261177c565b5b604051908082528060200260200182016040528015610e8c57816020015b610e796112c0565b815260200190600190039081610e715790505b50905060405180604001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018581525081600081518110610ece57610ecd611cbd565b5b60200260200101819052506040518060a0016040528087604051602001610ef59190611588565b60405160208183030381529060405281526020016040518060200160405280600081525081526020018281526020018473ffffffffffffffffffffffffffffffffffffffff168152602001610f5a604051806020016040528062030d4081525061102f565b815250915050949350505050565b6000610fca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110ae9092919063ffffffff16565b905060008151111561102a5780806020019051810190610fea9190611c90565b611029576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102090611d5e565b60405180910390fd5b5b505050565b60606397a657c960e01b8260405160240161104a9190611d9a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60606110bd84846000856110c6565b90509392505050565b60608247101561110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110290611e27565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111349190611e83565b60006040518083038185875af1925050503d8060008114611171576040519150601f19603f3d011682016040523d82523d6000602084013e611176565b606091505b509150915061118787838387611193565b92505050949350505050565b606083156111f55760008351036111ed576111ad85611208565b6111ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e390611ee6565b60405180910390fd5b5b829050611200565b6111ff838361122b565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561123e5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112729190611530565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61131781611304565b811461132257600080fd5b50565b6000813590506113348161130e565b92915050565b6000602082840312156113505761134f6112fa565b5b600061135e84828501611325565b91505092915050565b61137081611304565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113a182611376565b9050919050565b6113b181611396565b82525050565b60006060820190506113cc6000830186611367565b6113d960208301856113a8565b6113e66040830184611367565b949350505050565b600080fd5b600080fd5b600080fd5b60008083601f840112611413576114126113ee565b5b8235905067ffffffffffffffff8111156114305761142f6113f3565b5b60208301915083600182028301111561144c5761144b6113f8565b5b9250929050565b6000806020838503121561146a576114696112fa565b5b600083013567ffffffffffffffff811115611488576114876112ff565b5b611494858286016113fd565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114da5780820151818401526020810190506114bf565b60008484015250505050565b6000601f19601f8301169050919050565b6000611502826114a0565b61150c81856114ab565b935061151c8185602086016114bc565b611525816114e6565b840191505092915050565b6000602082019050818103600083015261154a81846114f7565b905092915050565b60008115159050919050565b61156781611552565b82525050565b6000602082019050611582600083018461155e565b92915050565b600060208201905061159d60008301846113a8565b92915050565b600067ffffffffffffffff82169050919050565b6115c0816115a3565b81146115cb57600080fd5b50565b6000813590506115dd816115b7565b92915050565b6115ec81611396565b81146115f757600080fd5b50565b600081359050611609816115e3565b92915050565b60008060008060808587031215611629576116286112fa565b5b6000611637878288016115ce565b9450506020611648878288016115fa565b9350506040611659878288016115fa565b925050606061166a87828801611325565b91505092959194509250565b6000819050919050565b61168981611676565b82525050565b60006020820190506116a46000830184611680565b92915050565b6000806000606084860312156116c3576116c26112fa565b5b60006116d186828701611325565b93505060206116e2868287016115fa565b92505060406116f386828701611325565b9150509250925092565b6000819050919050565b600061172261171d61171884611376565b6116fd565b611376565b9050919050565b600061173482611707565b9050919050565b600061174682611729565b9050919050565b6117568161173b565b82525050565b6000602082019050611771600083018461174d565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117b4826114e6565b810181811067ffffffffffffffff821117156117d3576117d261177c565b5b80604052505050565b60006117e66112f0565b90506117f282826117ab565b919050565b600067ffffffffffffffff8211156118125761181161177c565b5b61181b826114e6565b9050602081019050919050565b82818337600083830152505050565b600061184a611845846117f7565b6117dc565b90508281526020810184848401111561186657611865611777565b5b611871848285611828565b509392505050565b600082601f83011261188e5761188d6113ee565b5b813561189e848260208601611837565b91505092915050565b6000602082840312156118bd576118bc6112fa565b5b600082013567ffffffffffffffff8111156118db576118da6112ff565b5b6118e784828501611879565b91505092915050565b7f4343495053656e6465723a20756e617574686f72697a6564204f776e65720000600082015250565b6000611926601e836114ab565b9150611931826118f0565b602082019050919050565b6000602082019050818103600083015261195581611919565b9050919050565b60008151905061196b8161130e565b92915050565b600060208284031215611987576119866112fa565b5b60006119958482850161195c565b91505092915050565b6119a7816115a3565b82525050565b600081519050919050565b600082825260208201905092915050565b60006119d4826119ad565b6119de81856119b8565b93506119ee8185602086016114bc565b6119f7816114e6565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611a3781611396565b82525050565b611a4681611304565b82525050565b604082016000820151611a626000850182611a2e565b506020820151611a756020850182611a3d565b50505050565b6000611a878383611a4c565b60408301905092915050565b6000602082019050919050565b6000611aab82611a02565b611ab58185611a0d565b9350611ac083611a1e565b8060005b83811015611af1578151611ad88882611a7b565b9750611ae383611a93565b925050600181019050611ac4565b5085935050505092915050565b600060a0830160008301518482036000860152611b1b82826119c9565b91505060208301518482036020860152611b3582826119c9565b91505060408301518482036040860152611b4f8282611aa0565b9150506060830151611b646060860182611a2e565b5060808301518482036080860152611b7c82826119c9565b9150508091505092915050565b6000604082019050611b9e600083018561199e565b8181036020830152611bb08184611afe565b90509392505050565b6000604082019050611bce6000830185611367565b611bdb6020830184611367565b9392505050565b611beb81611676565b8114611bf657600080fd5b50565b600081519050611c0881611be2565b92915050565b600060208284031215611c2457611c236112fa565b5b6000611c3284828501611bf9565b91505092915050565b6000604082019050611c5060008301856113a8565b611c5d6020830184611367565b9392505050565b611c6d81611552565b8114611c7857600080fd5b50565b600081519050611c8a81611c64565b92915050565b600060208284031215611ca657611ca56112fa565b5b6000611cb484828501611c7b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611d48602a836114ab565b9150611d5382611cec565b604082019050919050565b60006020820190508181036000830152611d7781611d3b565b9050919050565b602082016000820151611d946000850182611a3d565b50505050565b6000602082019050611daf6000830184611d7e565b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611e116026836114ab565b9150611e1c82611db5565b604082019050919050565b60006020820190508181036000830152611e4081611e04565b9050919050565b600081905092915050565b6000611e5d826119ad565b611e678185611e47565b9350611e778185602086016114bc565b80840191505092915050565b6000611e8f8284611e52565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611ed0601d836114ab565b9150611edb82611e9a565b602082019050919050565b60006020820190508181036000830152611eff81611ec3565b905091905056fea2646970667358221220f3e5c05b0c9ac065b64c486d57b13f0d29c215bc1d55e882ecba8152e633b2ab64736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063afa2a1801161008c578063d8fc063d11610066578063d8fc063d146101f0578063dbb84759146101fa578063f099fd6f14610218578063f887ea4014610234576100cf565b8063afa2a180146101ac578063bc294d7d146101b6578063c56a4591146101e6576100cf565b80630d80fefd146100d4578063634d45b2146101065780637b2aab03146101365780638da5cb5b146101545780638dc654a2146101725780639bb4e5371461017c575b600080fd5b6100ee60048036038101906100e9919061133a565b610252565b6040516100fd939291906113b7565b60405180910390f35b610120600480360381019061011b9190611453565b61029c565b60405161012d9190611530565b60405180910390f35b61013e6102b5565b60405161014b919061156d565b60405180910390f35b61015c6102c8565b6040516101699190611588565b60405180910390f35b61017a6102ee565b005b6101966004803603810190610191919061160f565b610486565b6040516101a3919061168f565b60405180910390f35b6101b461077b565b005b6101d060048036038101906101cb919061133a565b6108ec565b6040516101dd919061156d565b60405180910390f35b6101ee61090c565b005b6101f8610a7d565b005b610202610c15565b60405161020f9190611588565b60405180910390f35b610232600480360381019061022d91906116aa565b610c3b565b005b61023c610d84565b604051610249919061175c565b60405180910390f35b60046020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905083565b606082828101906102ad91906118a7565b905092915050565b600260149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103759061193c565b60405180910390fd5b610484600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103fd9190611588565b602060405180830381865afa15801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190611971565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610da89092919063ffffffff16565b565b6000806104b58585857f0000000000000000000000000000000000000000000000000000000000000000610e2e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded88846040518363ffffffff1660e01b8152600401610515929190611b89565b602060405180830381865afa158015610532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105569190611971565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b19190611588565b602060405180830381865afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f29190611971565b8111156106d1577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106529190611588565b602060405180830381865afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190611971565b816040517f28fdcaa10000000000000000000000000000000000000000000000000000000081526004016106c8929190611bb9565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f988846040518363ffffffff1660e01b815260040161072c929190611b89565b6020604051808303816000875af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190611c0e565b92505050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461080b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108029061193c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016108a6929190611c3b565b6020604051808303816000875af11580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e99190611c90565b50565b60036020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461099c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109939061193c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610a37929190611c3b565b6020604051808303816000875af1158015610a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7a9190611c90565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b049061193c565b60405180910390fd5b610c13600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b8c9190611588565b602060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190611971565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610da89092919063ffffffff16565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600067304611b6affba76a905060405180606001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250600460008681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015590505060016003600086815260200190815260200160002060006101000a81548160ff021916908315150217905550610d4281847f000000000000000000000000000000000000000000000000000000000000000085610486565b507f117f98de0fb7abfad7b68e4ed4f5898976df4b7da38d60ddc6a6e689369f16bf848484604051610d76939291906113b7565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e298363a9059cbb60e01b8484604051602401610dc7929190611c3b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f68565b505050565b610e3661127b565b6000600167ffffffffffffffff811115610e5357610e5261177c565b5b604051908082528060200260200182016040528015610e8c57816020015b610e796112c0565b815260200190600190039081610e715790505b50905060405180604001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018581525081600081518110610ece57610ecd611cbd565b5b60200260200101819052506040518060a0016040528087604051602001610ef59190611588565b60405160208183030381529060405281526020016040518060200160405280600081525081526020018281526020018473ffffffffffffffffffffffffffffffffffffffff168152602001610f5a604051806020016040528062030d4081525061102f565b815250915050949350505050565b6000610fca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110ae9092919063ffffffff16565b905060008151111561102a5780806020019051810190610fea9190611c90565b611029576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102090611d5e565b60405180910390fd5b5b505050565b60606397a657c960e01b8260405160240161104a9190611d9a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60606110bd84846000856110c6565b90509392505050565b60608247101561110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110290611e27565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111349190611e83565b60006040518083038185875af1925050503d8060008114611171576040519150601f19603f3d011682016040523d82523d6000602084013e611176565b606091505b509150915061118787838387611193565b92505050949350505050565b606083156111f55760008351036111ed576111ad85611208565b6111ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e390611ee6565b60405180910390fd5b5b829050611200565b6111ff838361122b565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111561123e5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112729190611530565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61131781611304565b811461132257600080fd5b50565b6000813590506113348161130e565b92915050565b6000602082840312156113505761134f6112fa565b5b600061135e84828501611325565b91505092915050565b61137081611304565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113a182611376565b9050919050565b6113b181611396565b82525050565b60006060820190506113cc6000830186611367565b6113d960208301856113a8565b6113e66040830184611367565b949350505050565b600080fd5b600080fd5b600080fd5b60008083601f840112611413576114126113ee565b5b8235905067ffffffffffffffff8111156114305761142f6113f3565b5b60208301915083600182028301111561144c5761144b6113f8565b5b9250929050565b6000806020838503121561146a576114696112fa565b5b600083013567ffffffffffffffff811115611488576114876112ff565b5b611494858286016113fd565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114da5780820151818401526020810190506114bf565b60008484015250505050565b6000601f19601f8301169050919050565b6000611502826114a0565b61150c81856114ab565b935061151c8185602086016114bc565b611525816114e6565b840191505092915050565b6000602082019050818103600083015261154a81846114f7565b905092915050565b60008115159050919050565b61156781611552565b82525050565b6000602082019050611582600083018461155e565b92915050565b600060208201905061159d60008301846113a8565b92915050565b600067ffffffffffffffff82169050919050565b6115c0816115a3565b81146115cb57600080fd5b50565b6000813590506115dd816115b7565b92915050565b6115ec81611396565b81146115f757600080fd5b50565b600081359050611609816115e3565b92915050565b60008060008060808587031215611629576116286112fa565b5b6000611637878288016115ce565b9450506020611648878288016115fa565b9350506040611659878288016115fa565b925050606061166a87828801611325565b91505092959194509250565b6000819050919050565b61168981611676565b82525050565b60006020820190506116a46000830184611680565b92915050565b6000806000606084860312156116c3576116c26112fa565b5b60006116d186828701611325565b93505060206116e2868287016115fa565b92505060406116f386828701611325565b9150509250925092565b6000819050919050565b600061172261171d61171884611376565b6116fd565b611376565b9050919050565b600061173482611707565b9050919050565b600061174682611729565b9050919050565b6117568161173b565b82525050565b6000602082019050611771600083018461174d565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117b4826114e6565b810181811067ffffffffffffffff821117156117d3576117d261177c565b5b80604052505050565b60006117e66112f0565b90506117f282826117ab565b919050565b600067ffffffffffffffff8211156118125761181161177c565b5b61181b826114e6565b9050602081019050919050565b82818337600083830152505050565b600061184a611845846117f7565b6117dc565b90508281526020810184848401111561186657611865611777565b5b611871848285611828565b509392505050565b600082601f83011261188e5761188d6113ee565b5b813561189e848260208601611837565b91505092915050565b6000602082840312156118bd576118bc6112fa565b5b600082013567ffffffffffffffff8111156118db576118da6112ff565b5b6118e784828501611879565b91505092915050565b7f4343495053656e6465723a20756e617574686f72697a6564204f776e65720000600082015250565b6000611926601e836114ab565b9150611931826118f0565b602082019050919050565b6000602082019050818103600083015261195581611919565b9050919050565b60008151905061196b8161130e565b92915050565b600060208284031215611987576119866112fa565b5b60006119958482850161195c565b91505092915050565b6119a7816115a3565b82525050565b600081519050919050565b600082825260208201905092915050565b60006119d4826119ad565b6119de81856119b8565b93506119ee8185602086016114bc565b6119f7816114e6565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611a3781611396565b82525050565b611a4681611304565b82525050565b604082016000820151611a626000850182611a2e565b506020820151611a756020850182611a3d565b50505050565b6000611a878383611a4c565b60408301905092915050565b6000602082019050919050565b6000611aab82611a02565b611ab58185611a0d565b9350611ac083611a1e565b8060005b83811015611af1578151611ad88882611a7b565b9750611ae383611a93565b925050600181019050611ac4565b5085935050505092915050565b600060a0830160008301518482036000860152611b1b82826119c9565b91505060208301518482036020860152611b3582826119c9565b91505060408301518482036040860152611b4f8282611aa0565b9150506060830151611b646060860182611a2e565b5060808301518482036080860152611b7c82826119c9565b9150508091505092915050565b6000604082019050611b9e600083018561199e565b8181036020830152611bb08184611afe565b90509392505050565b6000604082019050611bce6000830185611367565b611bdb6020830184611367565b9392505050565b611beb81611676565b8114611bf657600080fd5b50565b600081519050611c0881611be2565b92915050565b600060208284031215611c2457611c236112fa565b5b6000611c3284828501611bf9565b91505092915050565b6000604082019050611c5060008301856113a8565b611c5d6020830184611367565b9392505050565b611c6d81611552565b8114611c7857600080fd5b50565b600081519050611c8a81611c64565b92915050565b600060208284031215611ca657611ca56112fa565b5b6000611cb484828501611c7b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611d48602a836114ab565b9150611d5382611cec565b604082019050919050565b60006020820190508181036000830152611d7781611d3b565b9050919050565b602082016000820151611d946000850182611a3d565b50505050565b6000602082019050611daf6000830184611d7e565b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611e116026836114ab565b9150611e1c82611db5565b604082019050919050565b60006020820190508181036000830152611e4081611e04565b9050919050565b600081905092915050565b6000611e5d826119ad565b611e678185611e47565b9350611e778185602086016114bc565b80840191505092915050565b6000611e8f8284611e52565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611ed0601d836114ab565b9150611edb82611e9a565b602082019050919050565b60006020820190508181036000830152611eff81611ec3565b905091905056fea2646970667358221220f3e5c05b0c9ac065b64c486d57b13f0d29c215bc1d55e882ecba8152e633b2ab64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 876,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "router",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRouterClient)51"
      },
      {
        "astId": 878,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 880,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "receiverTeleporter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 883,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "updated",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 887,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "sentMessages",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 892,
        "contract": "contracts/CCIPSender.sol:CCIPSender",
        "label": "messages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Messages)858_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRouterClient)51": {
        "encoding": "inplace",
        "label": "contract IRouterClient",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Messages)858_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CCIPSender.Messages)",
        "numberOfBytes": "32",
        "value": "t_struct(Messages)858_storage"
      },
      "t_struct(Messages)858_storage": {
        "encoding": "inplace",
        "label": "struct CCIPSender.Messages",
        "members": [
          {
            "astId": 853,
            "contract": "contracts/CCIPSender.sol:CCIPSender",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 855,
            "contract": "contracts/CCIPSender.sol:CCIPSender",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 857,
            "contract": "contracts/CCIPSender.sol:CCIPSender",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}