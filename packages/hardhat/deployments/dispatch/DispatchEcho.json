{
  "address": "0x3121755876315df300acf20b526C16ED54323Ac5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "ReceivedMessage",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dispatchAssigned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dispatches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dispatcherAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dispatcherAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "businessAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "businessAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dispatcherAddress",
          "type": "address"
        }
      ],
      "name": "inputsToMessage",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "contract ITeleporterMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dispatcherAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dispatcherAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "businessAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "businessAmount",
          "type": "uint256"
        }
      ],
      "name": "placeDispatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "receiveTeleporterMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destinationAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dispatcherAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66b7a76e798ddd8ece6161e61bc439846f9b2e208fb174d70de87b04c027903a",
  "receipt": {
    "to": null,
    "from": "0xa08A9F51475B42d8F15b28bD91918221Ee71bf8F",
    "contractAddress": "0x3121755876315df300acf20b526C16ED54323Ac5",
    "transactionIndex": 0,
    "gasUsed": "1096293",
    "logsBloom": "0x
    "blockHash": "0xf329b79d6a083af6541a9177330a3c619e9965ce2cb8d26cf86e9eb39e7dbb3a",
    "transactionHash": "0x66b7a76e798ddd8ece6161e61bc439846f9b2e208fb174d70de87b04c027903a",
    "logs": [],
    "blockNumber": 8394,
    "cumulativeGasUsed": "1096293",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f6e0222c398153f5bdde48d9760bf6cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ReceivedMessage\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dispatchAssigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dispatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dispatcherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dispatcherAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"businessAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"businessAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dispatcherAddress\",\"type\":\"address\"}],\"name\":\"inputsToMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"contract ITeleporterMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dispatcherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dispatcherAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"businessAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"businessAmount\",\"type\":\"uint256\"}],\"name\":\"placeDispatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveTeleporterMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dispatcherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sendMessage(address,uint256,address,uint256,uint256)\":{\"details\":\"Sends a message to another chain.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DispatchEcho.sol\":\"DispatchEcho\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DispatchEcho.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/contracts/teleporter/ITeleporterMessenger.sol\\\";\\nimport \\\"../lib/contracts/teleporter/ITeleporterReceiver.sol\\\";\\n\\ncontract DispatchEcho is ITeleporterReceiver {\\n    ITeleporterMessenger public immutable messenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\\n\\n    enum DispatchStatus {\\n        Placed,\\n        Transit,\\n        Completed,\\n        Failed\\n    }\\n\\n    struct DispatchStruct {\\n\\t\\tuint256 id;\\n\\t\\taddress clientAddress;\\n\\t\\tuint256 totalAmount;\\n\\t\\taddress dispatcherAddress;\\n\\t\\tuint256 dispatcherAmount;\\n\\t\\taddress businessAddress;\\n\\t\\tuint256 businessAmount;\\n\\t}\\n\\n    mapping(uint256 => bool) public dispatchAssigned;\\n    mapping(uint256 => DispatchStruct) public dispatches;\\n\\n    event ReceivedMessage(bytes message);\\n\\n    /**\\n     * @dev Sends a message to another chain.\\n     */\\n    function sendMessage(address destinationAddress, uint256 id, address dispatcherAddress, uint256 amount, uint256 gasLimit) external {\\n        bytes memory encodedFunctionCall = \\n        abi.encodeWithSignature(\\\"finalize(uint256,address)\\\", id, dispatcherAddress);\\n    \\n        messenger.sendCrossChainMessage(\\n            TeleporterMessageInput({\\n                destinationBlockchainID: 0x7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d5,\\n                destinationAddress: destinationAddress,\\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\\n                requiredGasLimit: gasLimit,\\n                allowedRelayerAddresses: new address[](0),\\n                message: encodedFunctionCall\\n            })\\n        );\\n    }\\n\\n    function inputsToMessage(uint256 id, address dispatcherAddress) external pure returns (bytes memory) {\\n        return \\n        abi.encodeWithSignature(\\\"finalize(uint256,address)\\\", id, dispatcherAddress);\\n    }\\n\\n    //Change to internal\\n    function placeDispatch(\\n            uint256 id, \\n            address clientAddress, \\n            uint256 totalAmount, \\n            address dispatcherAddress, \\n            uint256 dispatcherAmount, \\n            address businessAddress, \\n            uint256 businessAmount\\n        ) public {\\n        require(!dispatchAssigned[id], \\\"Dispatch already assigned\\\");\\n        dispatches[id] = DispatchStruct(id, clientAddress, totalAmount, dispatcherAddress, dispatcherAmount, businessAddress, businessAmount);\\n        dispatchAssigned[id] = true;\\n    }\\n\\n    function receiveTeleporterMessage(bytes32, address, bytes calldata message) external {\\n        // Only the Teleporter receiver can deliver a message.\\n        require(msg.sender == address(messenger), \\\"ReceiverOnSubnet: unauthorized TeleporterMessenger\\\");\\n        (uint256 id, address clientAddress, uint256 totalAmount, address dispatcherAddress, uint256 dispatcherAmount, address businessAddress, uint256 businessAmount) = \\n        abi.decode(message[4:], (uint256,address,uint256,address,uint256,address,uint256));\\n        placeDispatch(id, clientAddress, totalAmount, dispatcherAddress, dispatcherAmount, businessAddress, businessAmount);\\n        emit ReceivedMessage(message);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xb05b78e25e142a1b035ed16bf99f196255df22283c2a25e3a0e28b893dd02c91\",\"license\":\"MIT\"},\"lib/contracts/teleporter/ITeleporterMessenger.sol\":{\"content\":\"// (c) 2023, Ava Labs, Inc. All rights reserved.\\n// See the file LICENSE for licensing terms.\\n\\n// SPDX-License-Identifier: Ecosystem\\n\\npragma solidity 0.8.25;\\n\\n// A message receipt identifies the message that was delivered by its nonce,\\n// and the address that can redeem the reward for that message.\\nstruct TeleporterMessageReceipt {\\n    uint256 receivedMessageNonce;\\n    address relayerRewardAddress;\\n}\\n\\n// Represents all of the information required for submitting a Teleporter message\\n// to be sent to the given destination chain ID and address. Includes the fee\\n// information for the message, the amount of gas the relayer must provide to execute\\n// the message on the destination chain, the relayer accounts allowed to deliver the\\n// message, and the message data itself.\\nstruct TeleporterMessageInput {\\n    bytes32 destinationBlockchainID;\\n    address destinationAddress;\\n    TeleporterFeeInfo feeInfo;\\n    uint256 requiredGasLimit;\\n    address[] allowedRelayerAddresses;\\n    bytes message;\\n}\\n\\n// Represents a message sent or received by an implementation of {ITeleporterMessenger}.\\nstruct TeleporterMessage {\\n    uint256 messageNonce;\\n    address originSenderAddress;\\n    bytes32 destinationBlockchainID;\\n    address destinationAddress;\\n    uint256 requiredGasLimit;\\n    address[] allowedRelayerAddresses;\\n    TeleporterMessageReceipt[] receipts;\\n    bytes message;\\n}\\n\\n// Represents the fee information associated to a given Teleporter message.\\n// The contract address is the asset contract the fee will be paid in, and\\n// the amount is the amount of that specified asset.\\nstruct TeleporterFeeInfo {\\n    address feeTokenAddress;\\n    uint256 amount;\\n}\\n\\n/**\\n * @dev Interface that describes functionalities for a cross-chain messenger implementing the Teleporter protcol.\\n *\\n * @custom:security-contact https://github.com/ava-labs/teleporter/blob/main/SECURITY.md\\n */\\ninterface ITeleporterMessenger {\\n    /**\\n     * @notice Emitted when the blockchain ID of the contract instance is initialized using the Warp precompile.\\n     */\\n    event BlockchainIDInitialized(bytes32 indexed blockchainID);\\n\\n    /**\\n     * @notice Emitted when sending a Teleporter message cross-chain.\\n     */\\n    event SendCrossChainMessage(\\n        bytes32 indexed messageID,\\n        bytes32 indexed destinationBlockchainID,\\n        TeleporterMessage message,\\n        TeleporterFeeInfo feeInfo\\n    );\\n\\n    /**\\n     * @notice Emitted when an additional fee amount is added to a Teleporter message that had previously\\n     * been sent, but not yet delivered to the destination chain.\\n     */\\n    event AddFeeAmount(bytes32 indexed messageID, TeleporterFeeInfo updatedFeeInfo);\\n\\n    /**\\n     * @notice Emitted when a Teleporter message is being delivered on the destination chain to an address,\\n     * but message execution fails. Failed messages can then be retried with `retryMessageExecution`\\n     */\\n    event MessageExecutionFailed(\\n        bytes32 indexed messageID, bytes32 indexed sourceBlockchainID, TeleporterMessage message\\n    );\\n\\n    /**\\n     * @notice Emitted when a Teleporter message is successfully executed with the\\n     * specified destination address and message call data. This can occur either when\\n     * the message is initially received, or on a retry attempt.\\n     *\\n     * Each message received can be executed successfully at most once.\\n     */\\n    event MessageExecuted(bytes32 indexed messageID, bytes32 indexed sourceBlockchainID);\\n\\n    /**\\n     * @notice Emitted when a TeleporterMessage is successfully received.\\n     */\\n    event ReceiveCrossChainMessage(\\n        bytes32 indexed messageID,\\n        bytes32 indexed sourceBlockchainID,\\n        address indexed deliverer,\\n        address rewardRedeemer,\\n        TeleporterMessage message\\n    );\\n\\n    /**\\n     * @notice Emitted when a receipt is marked as received on the source chain that sent the\\n     * corresponding Teleporter message.\\n     */\\n    event ReceiptReceived(\\n        bytes32 indexed messageID,\\n        bytes32 indexed destinationBlockchainID,\\n        address indexed relayerRewardAddress,\\n        TeleporterFeeInfo feeInfo\\n    );\\n\\n    /**\\n     * @notice Emitted when an account redeems accumulated relayer rewards.\\n     */\\n    event RelayerRewardsRedeemed(address indexed redeemer, address indexed asset, uint256 amount);\\n\\n    /**\\n     * @notice Called by transactions to initiate the sending of a cross-chain message.\\n     * @return The message ID of the newly sent message.\\n     */\\n    function sendCrossChainMessage(TeleporterMessageInput calldata messageInput)\\n        external\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Called by transactions to retry the sending of a cross-chain message.\\n     *\\n     * @dev Retriggers the sending of a message previously emitted by sendCrossChainMessage that has not yet been acknowledged\\n     * with a receipt from the destination chain. This may be necessary in the unlikely event that less than the required\\n     * threshold of stake weight successfully inserted the message in their messages DB at the time of the first submission.\\n     * The message is checked to have already been previously submitted by comparing its message hash against those kept in\\n     * state until a receipt is received for the message.\\n     */\\n    function retrySendCrossChainMessage(TeleporterMessage calldata message) external;\\n\\n    /**\\n     * @notice Adds the additional fee amount to the amount to be paid to the relayer that delivers\\n     * the given message ID to the destination chain.\\n     *\\n     * @dev The fee token address must be the same asset type as the fee asset specified in the original\\n     * call to sendCrossChainMessage. Reverts if the message doesn't exist or there is already\\n     * receipt of delivery of the message.\\n     */\\n    function addFeeAmount(\\n        bytes32 messageID,\\n        address feeTokenAddress,\\n        uint256 additionalFeeAmount\\n    ) external;\\n\\n    /**\\n     * @notice Receives a cross-chain message, and marks the `relayerRewardAddress` for fee reward for a successful delivery.\\n     *\\n     * @dev The message specified by `messageIndex` must be provided at that index in the access list storage slots of the transaction,\\n     * and is verified in the precompile predicate.\\n     */\\n    function receiveCrossChainMessage(uint32 messageIndex, address relayerRewardAddress) external;\\n\\n    /**\\n     * @notice Retries the execution of a previously delivered message by verifying the payload matches\\n     * the hash of the payload originally delivered, and calling the destination address again.\\n     *\\n     * @dev Intended to be used if message excution failed on initial delivery of the Teleporter message.\\n     * For example, this may occur if the original required gas limit was not sufficient for the message\\n     * execution, or if the destination address did not contain a contract, but a compatible contract\\n     * was later deployed to that address. Messages are ensured to be successfully executed at most once.\\n     */\\n    function retryMessageExecution(\\n        bytes32 sourceBlockchainID,\\n        TeleporterMessage calldata message\\n    ) external;\\n\\n    /**\\n     * @notice Sends the receipts for the given `messageIDs`.\\n     *\\n     * @dev Sends the specified message receipts in a new message (with an empty payload) back to the source chain.\\n     * This is intended for use in sending receipts that have not been sent in a timely manner by the standard\\n     * receipt delivery mechanism.\\n     * @return The message ID of the newly sent message.\\n     */\\n    function sendSpecifiedReceipts(\\n        bytes32 sourceBlockchainID,\\n        bytes32[] calldata messageIDs,\\n        TeleporterFeeInfo calldata feeInfo,\\n        address[] calldata allowedRelayerAddresses\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Sends any fee amount rewards for the given fee asset out to the caller.\\n     */\\n    function redeemRelayerRewards(address feeTokenAddress) external;\\n\\n    /**\\n     * @notice Gets the hash of a given message stored in the EVM state, if the message exists.\\n     * @return The message hash\\n     */\\n    function getMessageHash(bytes32 messageID) external view returns (bytes32);\\n\\n    /**\\n     * @notice Checks whether or not the given message has been received by this chain.\\n     * @return Boolean representing if the given message has been received.\\n     */\\n    function messageReceived(bytes32 messageID) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address the relayer reward should be sent to on the source chain\\n     * for a given message, assuming that the message has already been delivered.\\n     * @return The relayer reward address for the given message.\\n     */\\n    function getRelayerRewardAddress(bytes32 messageID) external view returns (address);\\n\\n    /**\\n     * @notice Gets the current reward amount of a given fee asset that is redeemable by the given relayer.\\n     * @return The amount of the fee asset redeemable by the specified relayer.\\n     */\\n    function checkRelayerRewardAmount(\\n        address relayer,\\n        address feeTokenAddress\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the fee token address and amount for a given sent message.\\n     * @return The fee token address and fee amount for a the given sent message ID.\\n     * If the message ID is not found, zero address and amount values are returned.\\n     */\\n    function getFeeInfo(bytes32 messageID) external view returns (address, uint256);\\n\\n    /**\\n     * @notice Gets the message ID that would currently be used for the next message sent from the contract\\n     * instance to the given destination blockchain.\\n     *\\n     * @dev This message ID may never be used in the event that the next call to sendCrossChainMessage in a\\n     * transaction uses a different destination blockchain. The current value as returned by this function will\\n     * change with each successful call to sendCrossChainMessage.\\n     * @return The specified message ID.\\n     */\\n    function getNextMessageID(bytes32 destinationBlockchainID) external view returns (bytes32);\\n\\n    /**\\n     * @notice Gets the number of receipts that are waiting to be sent to the given source chain ID.\\n     * @return Size of the given queue.\\n     */\\n    function getReceiptQueueSize(bytes32 sourceBlockchainID) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the receipt at the given index in the queue for the given source chain ID.\\n     * @return The receipt requested.\\n     */\\n    function getReceiptAtIndex(\\n        bytes32 sourceBlockchainID,\\n        uint256 index\\n    ) external view returns (TeleporterMessageReceipt memory);\\n}\\n\",\"keccak256\":\"0x606dfdbdc40ba0545c1e6156028cbb910c45a6bf36b2743bbaadd1c42b22ed8a\",\"license\":\"Ecosystem\"},\"lib/contracts/teleporter/ITeleporterReceiver.sol\":{\"content\":\"// (c) 2022-2023, Ava Labs, Inc. All rights reserved.\\n// See the file LICENSE for licensing terms.\\n\\n// SPDX-License-Identifier: Ecosystem\\n\\npragma solidity 0.8.25;\\n\\n/**\\n * @dev Interface that cross-chain applications must implement to receive messages from Teleporter.\\n *\\n * @custom:security-contact https://github.com/ava-labs/teleporter/blob/main/SECURITY.md\\n */\\ninterface ITeleporterReceiver {\\n    /**\\n     * @dev Called by TeleporterMessenger on the receiving chain.\\n     *\\n     * @param sourceBlockchainID is provided by the TeleporterMessenger contract.\\n     * @param originSenderAddress is provided by the TeleporterMessenger contract.\\n     * @param message is the TeleporterMessage payload set by the sender.\\n     */\\n    function receiveTeleporterMessage(\\n        bytes32 sourceBlockchainID,\\n        address originSenderAddress,\\n        bytes calldata message\\n    ) external;\\n}\\n\",\"keccak256\":\"0x36a075a32c040d3830d16136487f411c2c619107fcc0b91c80d20b3aadc938c4\",\"license\":\"Ecosystem\"}},\"version\":1}",
  "bytecode": "0x60a060405273253b2784c75e510dd0ff1da844684a1ac0aa5fcf73ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015605657600080fd5b506080516112e6610080600039600081816102260152818161030c01526104bc01526112e66000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063761968a11161005b578063761968a114610100578063c868efaa14610136578063e3a6963914610152578063fc8c517e1461016e5761007d565b806326d8e706146100825780633cb747bf146100b25780635ec58878146100d0575b600080fd5b61009c600480360381019061009791906108f3565b61018a565b6040516100a991906109c3565b60405180910390f35b6100ba610224565b6040516100c79190610a44565b60405180910390f35b6100ea60048036038101906100e59190610a5f565b610248565b6040516100f79190610aa7565b60405180910390f35b61011a60048036038101906101159190610a5f565b610268565b60405161012d9796959493929190610ae0565b60405180910390f35b610150600480360381019061014b9190610bea565b61030a565b005b61016c60048036038101906101679190610c5e565b610426565b005b61018860048036038101906101839190610cd9565b610639565b005b6060828260405160240161019f929190610d7b565b6040516020818303038152906040527f510254c1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915054906101000a900460ff1681565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154905087565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90610e27565b60405180910390fd5b6000806000806000806000888860049080926103b693929190610e51565b8101906103c39190610eca565b96509650965096509650965096506103e087878787878787610639565b7fd48f8fe505159014f137e2a0c1ff2a2892d08c5b639c94f0303210acd4a144408989604051610411929190610fa8565b60405180910390a15050505050505050505050565b6000848460405160240161043b929190610d7b565b6040516020818303038152906040527f510254c1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663624488506040518060c001604052807f7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d560001b81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152508152602001858152602001600067ffffffffffffffff81111561059957610598610fcc565b5b6040519080825280602002602001820160405280156105c75781602001602082028036833780820191505090505b508152602001848152506040518263ffffffff1660e01b81526004016105ed91906111e0565b6020604051808303816000875af115801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106309190611217565b50505050505050565b60008088815260200190815260200160002060009054906101000a900460ff1615610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069090611290565b60405180910390fd5b6040518060e001604052808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600160008981526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060155905050600160008089815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505050565b600080fd5b600080fd5b6000819050919050565b6108728161085f565b811461087d57600080fd5b50565b60008135905061088f81610869565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108c082610895565b9050919050565b6108d0816108b5565b81146108db57600080fd5b50565b6000813590506108ed816108c7565b92915050565b6000806040838503121561090a57610909610855565b5b600061091885828601610880565b9250506020610929858286016108de565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561096d578082015181840152602081019050610952565b60008484015250505050565b6000601f19601f8301169050919050565b600061099582610933565b61099f818561093e565b93506109af81856020860161094f565b6109b881610979565b840191505092915050565b600060208201905081810360008301526109dd818461098a565b905092915050565b6000819050919050565b6000610a0a610a05610a0084610895565b6109e5565b610895565b9050919050565b6000610a1c826109ef565b9050919050565b6000610a2e82610a11565b9050919050565b610a3e81610a23565b82525050565b6000602082019050610a596000830184610a35565b92915050565b600060208284031215610a7557610a74610855565b5b6000610a8384828501610880565b91505092915050565b60008115159050919050565b610aa181610a8c565b82525050565b6000602082019050610abc6000830184610a98565b92915050565b610acb8161085f565b82525050565b610ada816108b5565b82525050565b600060e082019050610af5600083018a610ac2565b610b026020830189610ad1565b610b0f6040830188610ac2565b610b1c6060830187610ad1565b610b296080830186610ac2565b610b3660a0830185610ad1565b610b4360c0830184610ac2565b98975050505050505050565b6000819050919050565b610b6281610b4f565b8114610b6d57600080fd5b50565b600081359050610b7f81610b59565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610baa57610ba9610b85565b5b8235905067ffffffffffffffff811115610bc757610bc6610b8a565b5b602083019150836001820283011115610be357610be2610b8f565b5b9250929050565b60008060008060608587031215610c0457610c03610855565b5b6000610c1287828801610b70565b9450506020610c23878288016108de565b935050604085013567ffffffffffffffff811115610c4457610c4361085a565b5b610c5087828801610b94565b925092505092959194509250565b600080600080600060a08688031215610c7a57610c79610855565b5b6000610c88888289016108de565b9550506020610c9988828901610880565b9450506040610caa888289016108de565b9350506060610cbb88828901610880565b9250506080610ccc88828901610880565b9150509295509295909350565b600080600080600080600060e0888a031215610cf857610cf7610855565b5b6000610d068a828b01610880565b9750506020610d178a828b016108de565b9650506040610d288a828b01610880565b9550506060610d398a828b016108de565b9450506080610d4a8a828b01610880565b93505060a0610d5b8a828b016108de565b92505060c0610d6c8a828b01610880565b91505092959891949750929550565b6000604082019050610d906000830185610ac2565b610d9d6020830184610ad1565b9392505050565b600082825260208201905092915050565b7f52656365697665724f6e5375626e65743a20756e617574686f72697a6564205460008201527f656c65706f727465724d657373656e6765720000000000000000000000000000602082015250565b6000610e11603283610da4565b9150610e1c82610db5565b604082019050919050565b60006020820190508181036000830152610e4081610e04565b9050919050565b600080fd5b600080fd5b60008085851115610e6557610e64610e47565b5b83861115610e7657610e75610e4c565b5b6001850283019150848603905094509492505050565b6000610e9782610895565b9050919050565b610ea781610e8c565b8114610eb257600080fd5b50565b600081359050610ec481610e9e565b92915050565b600080600080600080600060e0888a031215610ee957610ee8610855565b5b6000610ef78a828b01610880565b9750506020610f088a828b01610eb5565b9650506040610f198a828b01610880565b9550506060610f2a8a828b01610eb5565b9450506080610f3b8a828b01610880565b93505060a0610f4c8a828b01610eb5565b92505060c0610f5d8a828b01610880565b91505092959891949750929550565b82818337600083830152505050565b6000610f87838561093e565b9350610f94838584610f6c565b610f9d83610979565b840190509392505050565b60006020820190508181036000830152610fc3818486610f7b565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61100481610b4f565b82525050565b611013816108b5565b82525050565b6110228161085f565b82525050565b60408201600082015161103e600085018261100a565b5060208201516110516020850182611019565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061108f838361100a565b60208301905092915050565b6000602082019050919050565b60006110b382611057565b6110bd8185611062565b93506110c883611073565b8060005b838110156110f95781516110e08882611083565b97506110eb8361109b565b9250506001810190506110cc565b5085935050505092915050565b600082825260208201905092915050565b600061112282610933565b61112c8185611106565b935061113c81856020860161094f565b61114581610979565b840191505092915050565b600060e0830160008301516111686000860182610ffb565b50602083015161117b602086018261100a565b50604083015161118e6040860182611028565b5060608301516111a16080860182611019565b50608083015184820360a08601526111b982826110a8565b91505060a083015184820360c08601526111d38282611117565b9150508091505092915050565b600060208201905081810360008301526111fa8184611150565b905092915050565b60008151905061121181610b59565b92915050565b60006020828403121561122d5761122c610855565b5b600061123b84828501611202565b91505092915050565b7f446973706174636820616c72656164792061737369676e656400000000000000600082015250565b600061127a601983610da4565b915061128582611244565b602082019050919050565b600060208201905081810360008301526112a98161126d565b905091905056fea26469706673582212205765bca687af41d732b71f6d43f45b0b8810dd39d05411ff40808e86b28bae4564736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063761968a11161005b578063761968a114610100578063c868efaa14610136578063e3a6963914610152578063fc8c517e1461016e5761007d565b806326d8e706146100825780633cb747bf146100b25780635ec58878146100d0575b600080fd5b61009c600480360381019061009791906108f3565b61018a565b6040516100a991906109c3565b60405180910390f35b6100ba610224565b6040516100c79190610a44565b60405180910390f35b6100ea60048036038101906100e59190610a5f565b610248565b6040516100f79190610aa7565b60405180910390f35b61011a60048036038101906101159190610a5f565b610268565b60405161012d9796959493929190610ae0565b60405180910390f35b610150600480360381019061014b9190610bea565b61030a565b005b61016c60048036038101906101679190610c5e565b610426565b005b61018860048036038101906101839190610cd9565b610639565b005b6060828260405160240161019f929190610d7b565b6040516020818303038152906040527f510254c1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020528060005260406000206000915054906101000a900460ff1681565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154905087565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90610e27565b60405180910390fd5b6000806000806000806000888860049080926103b693929190610e51565b8101906103c39190610eca565b96509650965096509650965096506103e087878787878787610639565b7fd48f8fe505159014f137e2a0c1ff2a2892d08c5b639c94f0303210acd4a144408989604051610411929190610fa8565b60405180910390a15050505050505050505050565b6000848460405160240161043b929190610d7b565b6040516020818303038152906040527f510254c1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663624488506040518060c001604052807f7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d560001b81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020016040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152508152602001858152602001600067ffffffffffffffff81111561059957610598610fcc565b5b6040519080825280602002602001820160405280156105c75781602001602082028036833780820191505090505b508152602001848152506040518263ffffffff1660e01b81526004016105ed91906111e0565b6020604051808303816000875af115801561060c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106309190611217565b50505050505050565b60008088815260200190815260200160002060009054906101000a900460ff1615610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069090611290565b60405180910390fd5b6040518060e001604052808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600160008981526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160060155905050600160008089815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505050565b600080fd5b600080fd5b6000819050919050565b6108728161085f565b811461087d57600080fd5b50565b60008135905061088f81610869565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108c082610895565b9050919050565b6108d0816108b5565b81146108db57600080fd5b50565b6000813590506108ed816108c7565b92915050565b6000806040838503121561090a57610909610855565b5b600061091885828601610880565b9250506020610929858286016108de565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561096d578082015181840152602081019050610952565b60008484015250505050565b6000601f19601f8301169050919050565b600061099582610933565b61099f818561093e565b93506109af81856020860161094f565b6109b881610979565b840191505092915050565b600060208201905081810360008301526109dd818461098a565b905092915050565b6000819050919050565b6000610a0a610a05610a0084610895565b6109e5565b610895565b9050919050565b6000610a1c826109ef565b9050919050565b6000610a2e82610a11565b9050919050565b610a3e81610a23565b82525050565b6000602082019050610a596000830184610a35565b92915050565b600060208284031215610a7557610a74610855565b5b6000610a8384828501610880565b91505092915050565b60008115159050919050565b610aa181610a8c565b82525050565b6000602082019050610abc6000830184610a98565b92915050565b610acb8161085f565b82525050565b610ada816108b5565b82525050565b600060e082019050610af5600083018a610ac2565b610b026020830189610ad1565b610b0f6040830188610ac2565b610b1c6060830187610ad1565b610b296080830186610ac2565b610b3660a0830185610ad1565b610b4360c0830184610ac2565b98975050505050505050565b6000819050919050565b610b6281610b4f565b8114610b6d57600080fd5b50565b600081359050610b7f81610b59565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610baa57610ba9610b85565b5b8235905067ffffffffffffffff811115610bc757610bc6610b8a565b5b602083019150836001820283011115610be357610be2610b8f565b5b9250929050565b60008060008060608587031215610c0457610c03610855565b5b6000610c1287828801610b70565b9450506020610c23878288016108de565b935050604085013567ffffffffffffffff811115610c4457610c4361085a565b5b610c5087828801610b94565b925092505092959194509250565b600080600080600060a08688031215610c7a57610c79610855565b5b6000610c88888289016108de565b9550506020610c9988828901610880565b9450506040610caa888289016108de565b9350506060610cbb88828901610880565b9250506080610ccc88828901610880565b9150509295509295909350565b600080600080600080600060e0888a031215610cf857610cf7610855565b5b6000610d068a828b01610880565b9750506020610d178a828b016108de565b9650506040610d288a828b01610880565b9550506060610d398a828b016108de565b9450506080610d4a8a828b01610880565b93505060a0610d5b8a828b016108de565b92505060c0610d6c8a828b01610880565b91505092959891949750929550565b6000604082019050610d906000830185610ac2565b610d9d6020830184610ad1565b9392505050565b600082825260208201905092915050565b7f52656365697665724f6e5375626e65743a20756e617574686f72697a6564205460008201527f656c65706f727465724d657373656e6765720000000000000000000000000000602082015250565b6000610e11603283610da4565b9150610e1c82610db5565b604082019050919050565b60006020820190508181036000830152610e4081610e04565b9050919050565b600080fd5b600080fd5b60008085851115610e6557610e64610e47565b5b83861115610e7657610e75610e4c565b5b6001850283019150848603905094509492505050565b6000610e9782610895565b9050919050565b610ea781610e8c565b8114610eb257600080fd5b50565b600081359050610ec481610e9e565b92915050565b600080600080600080600060e0888a031215610ee957610ee8610855565b5b6000610ef78a828b01610880565b9750506020610f088a828b01610eb5565b9650506040610f198a828b01610880565b9550506060610f2a8a828b01610eb5565b9450506080610f3b8a828b01610880565b93505060a0610f4c8a828b01610eb5565b92505060c0610f5d8a828b01610880565b91505092959891949750929550565b82818337600083830152505050565b6000610f87838561093e565b9350610f94838584610f6c565b610f9d83610979565b840190509392505050565b60006020820190508181036000830152610fc3818486610f7b565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61100481610b4f565b82525050565b611013816108b5565b82525050565b6110228161085f565b82525050565b60408201600082015161103e600085018261100a565b5060208201516110516020850182611019565b50505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061108f838361100a565b60208301905092915050565b6000602082019050919050565b60006110b382611057565b6110bd8185611062565b93506110c883611073565b8060005b838110156110f95781516110e08882611083565b97506110eb8361109b565b9250506001810190506110cc565b5085935050505092915050565b600082825260208201905092915050565b600061112282610933565b61112c8185611106565b935061113c81856020860161094f565b61114581610979565b840191505092915050565b600060e0830160008301516111686000860182610ffb565b50602083015161117b602086018261100a565b50604083015161118e6040860182611028565b5060608301516111a16080860182611019565b50608083015184820360a08601526111b982826110a8565b91505060a083015184820360c08601526111d38282611117565b9150508091505092915050565b600060208201905081810360008301526111fa8184611150565b905092915050565b60008151905061121181610b59565b92915050565b60006020828403121561122d5761122c610855565b5b600061123b84828501611202565b91505092915050565b7f446973706174636820616c72656164792061737369676e656400000000000000600082015250565b600061127a601983610da4565b915061128582611244565b602082019050919050565b600060208201905081810360008301526112a98161126d565b905091905056fea26469706673582212205765bca687af41d732b71f6d43f45b0b8810dd39d05411ff40808e86b28bae4564736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sendMessage(address,uint256,address,uint256,uint256)": {
        "details": "Sends a message to another chain."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1858,
        "contract": "contracts/DispatchEcho.sol:DispatchEcho",
        "label": "dispatchAssigned",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 1863,
        "contract": "contracts/DispatchEcho.sol:DispatchEcho",
        "label": "dispatches",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(DispatchStruct)1854_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(DispatchStruct)1854_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DispatchEcho.DispatchStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(DispatchStruct)1854_storage"
      },
      "t_struct(DispatchStruct)1854_storage": {
        "encoding": "inplace",
        "label": "struct DispatchEcho.DispatchStruct",
        "members": [
          {
            "astId": 1841,
            "contract": "contracts/DispatchEcho.sol:DispatchEcho",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1843,
            "contract": "contracts/DispatchEcho.sol:DispatchEcho",
            "label": "clientAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1845,
            "contract": "contracts/DispatchEcho.sol:DispatchEcho",
            "label": "totalAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1847,
            "contract": "contracts/DispatchEcho.sol:DispatchEcho",
            "label": "dispatcherAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1849,
            "contract": "contracts/DispatchEcho.sol:DispatchEcho",
            "label": "dispatcherAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1851,
            "contract": "contracts/DispatchEcho.sol:DispatchEcho",
            "label": "businessAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1853,
            "contract": "contracts/DispatchEcho.sol:DispatchEcho",
            "label": "businessAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}